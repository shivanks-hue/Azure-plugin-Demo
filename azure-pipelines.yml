trigger:
  - main

pool:
  name: Default   # Your self-hosted Windows agent pool name

variables:
  MAVEN_OPTS: "-Xmx1024m"
  LT_TUNNEL_DIR: "$(Agent.TempDirectory)/lambdatest-tunnel"  # Use forward slashes in paths

steps:
- checkout: self

# Step 1: Install JDK 21 using Chocolatey (or skip if already installed)
- powershell: |
    choco install openjdk21 -y
    java -version
  displayName: 'Install JDK 21'

# Step 2: Cache Maven dependencies
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    path: '$(USERPROFILE)\.m2\repository'
    restoreKeys: |
      maven | "$(Agent.OS)"

# Step 3: Install Google Chrome and ChromeDriver (with fallback for ChromeDriver)
- powershell: |
    # Detect Chrome path
    $chromePath = "${Env:ProgramFiles}\Google\Chrome\Application\chrome.exe"
    if (-Not (Test-Path $chromePath)) {
      $chromePath = "${Env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
    }
    if (-Not (Test-Path $chromePath)) {
      Write-Error "Google Chrome executable not found!"
      exit 1
    }

    # Try to get Chrome version from multiple registry paths
    $chromeVersion = $null

    try {
        $chromeVersion = (Get-ItemProperty "HKLM:\SOFTWARE\Google\Chrome\BLBeacon").version
    } catch {}

    if (-not $chromeVersion) {
        try {
            $chromeVersion = (Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Google\Chrome\BLBeacon").version
        } catch {}
    }

    if (-not $chromeVersion) {
        try {
            $chromeVersion = (Get-ItemProperty "HKCU:\Software\Google\Chrome\BLBeacon").version
        } catch {}
    }

    # Fallback: call chrome.exe --version if registry not found
    if (-not $chromeVersion) {
        Write-Host "Chrome version not found in registry, falling back to executable."
        $versionOutput = & $chromePath --version
        Write-Host "Chrome version output: $versionOutput"
        # Parse version number from output string, e.g., "Google Chrome 117.0.5938.92"
        $chromeVersion = ($versionOutput -split " ")[2]
    }
    if (-not $chromeVersion) {
      Write-Error "Unable to determine Chrome version."
      exit 1
    }
    Write-Host "Detected Chrome version: $chromeVersion"
    $chromeMajorVersion = $chromeVersion.Split('.')[0]
    Write-Host "Chrome major version: $chromeMajorVersion"
    # Download matching ChromeDriver version with fallback to latest stable
    $chromedriverVersionUrl = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$chromeMajorVersion"
    try {
        $chromedriverVersion = Invoke-RestMethod -Uri $chromedriverVersionUrl
    } catch {
        Write-Warning "No matching ChromeDriver for version $chromeMajorVersion. Using latest stable ChromeDriver version."
        $chromedriverVersion = Invoke-RestMethod -Uri "https://chromedriver.storage.googleapis.com/LATEST_RELEASE"
    }
    Write-Host "Using ChromeDriver version: $chromedriverVersion"
    $chromedriverZip = "chromedriver_win32.zip"
    Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/$chromedriverVersion/chromedriver_win32.zip" -OutFile $chromedriverZip
    # Extract chromedriver.exe
    Expand-Archive -Path $chromedriverZip -DestinationPath "$(Agent.ToolsDirectory)\chromedriver" -Force
    Remove-Item -Force $chromedriverZip
    # Add chromedriver to PATH for this session
    $env:PATH += ";$(Agent.ToolsDirectory)\chromedriver"
    # Verify chromedriver version
    & "$(Agent.ToolsDirectory)\chromedriver\chromedriver.exe" --version
  displayName: 'Install Chrome and ChromeDriver'

# Step 4: Download and Start LambdaTest Tunnel Automatically
- powershell: |
    $tunnelExe = "LT.exe"
    $ltFolder = "$(LT_TUNNEL_DIR)"

    if (-Not (Test-Path $ltFolder)) {
      New-Item -ItemType Directory -Path $ltFolder | Out-Null
    }

    # Correct URL to download the LambdaTest Tunnel executable
    Invoke-WebRequest -Uri "https://downloads.lambdatest.com/tunnel/v3/windows/386/LT.exe" -OutFile "$ltFolder\$tunnelExe"

    # Start the tunnel daemon
    $username = "$(ltUserName)"
    $accessKey = "$(ltAccessKey)"
    $startArgs = "--user $username --key $accessKey --logfile $ltFolder\lt.log --daemon"
    Start-Process -FilePath "$ltFolder\$tunnelExe" -ArgumentList $startArgs -NoNewWindow

    # Wait for the tunnel connection to be established (increased wait time)
    Write-Host "Waiting 60 seconds for LambdaTest Tunnel to establish..."
    Start-Sleep -Seconds 60  # Increased wait time to 60 seconds
  displayName: 'Start LambdaTest Tunnel'

# Step 5: Build Maven project
- script: mvn clean compile
  displayName: 'Maven Clean & Compile'

# Step 6: Run Selenium tests (make sure your ltOptions include tunnel=true!)
- script: mvn test
  displayName: 'Run Selenium Tests'

# Step 7: Stop LambdaTest Tunnel Automatically
- powershell: |
    Write-Host "Stopping LambdaTest Tunnel..."
    Get-Process LT -ErrorAction SilentlyContinue | Stop-Process -Force
  displayName: 'Stop LambdaTest Tunnel'

# Step 8: Package project (optional)
- script: mvn package
  displayName: 'Maven Package'
